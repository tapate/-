<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
	                   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	                   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
	                   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd"
	default-lazy-init="true">


	<description>Shiro资源权限控制 配置</description>

	<aop:aspectj-autoproxy proxy-target-class="false" />
   
   <!-- 
   <bean id="sslFilter" class="org.apache.shiro.web.filter.authz.SslFilter">  
        <property name="port" value="8443"/>  
    </bean>
    -->
     
     
    <!-- ==============================================CAS单点登录服务过滤器配置 start====================================================== -->
    <bean id="casFilter" class="org.apache.shiro.cas.CasFilter">
        <!-- 配置验证错误时的失败页面 -->
        <property name="failureUrl" value="${shiro.failureUrl}" />
        <property name="successUrl" value="${shiro.successUrl}" />
    </bean>
    <bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <!-- 配置验证错误时的失败页面 -->
        <property name="redirectUrl" value="${shiro.logoutUrl}" />
    </bean>
    
    <!-- 自定义认证核心逻辑，用于获取用户权限、角色、其他逻辑验证等。 -->
    <bean id="casRealm" class="pers.zb.ucenter.web.shiro.MyCasRealm">
        <!-- CAS服务前缀地址（也就是CAS服务的访问地址），CAS会进行服务地址的合法性验证 -->
        <property name="casServerUrlPrefix" value="${shiro.cas.serverUrlPrefix}" />
        
        <!-- 当前web应用服务地址，用来接收cas服务端ticket票据 -->
        <property name="casService" value="${shiro.cas.web.service}" />
    </bean>
    <bean id="casSubjectFactory" class="org.apache.shiro.cas.CasSubjectFactory"></bean>
    
    <!-- ==============================================CAS单点登录服务过滤器配置 end====================================================== -->
    
    
    <!-- 
        `==================================== 如果不想使用CAS单点认证服务，想使用普通的页面登陆，则，只需要简单的注释一些配置即可。===================================
        `操作步骤：
        `       1、shiroFilter这个bean中，需要修改配置loginUrl，不能使用CAS登陆地址了。
        `       2、shiroFilter这个bean中,注释掉filters属性中的过滤器内容。
        `       3、shiroFilter这个bean中,注释掉filterChainDefinitions属性中的/oauth = casFilter 和 /login/logout = logoutFilter。
        `       4、securityManager这个bean中，注释掉  <property name="subjectFactory" ref="casSubjectFactory"></property> 和 <property name="realm" ref="casRealm" />，启用 <property name="realm" ref="globalAuthorizingRealm" />
        
        `很简单的操作就使项目处于两种登陆认证状态，一种是普通的登陆，另一种是cas登陆认证，厉害了我的哥！ 想当年我在集成配置的时候各种问题和难题啊~~~~
        `由于casFilter、logoutFilter、casRealm、casSubjectFactory这些是单独的bean配置，如果不想被spring托管，可以注释掉，不影响项目运行效果。
        `=========================================================================================================================================================
     -->
    
	<!--shiro过滤器配置，bean的id值须与web中的filter-name的值相同 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- shiro的核心安全接口 -->
		<property name="securityManager" ref="securityManager" />
        
		<!-- 要求登录时的链接 -->
		<!-- <property name="loginUrl" value="/login/toLogin" /> -->
		<!-- 这里使用CAS认证中心的登录地址，以前普通的登录页面不再使用，直接跳转到CAS系统认证 -->
        <property name="loginUrl" value="${shiro.loginUrl}" />
        
        
		<!-- 登陆成功后要跳转的连接 -->
		<!-- <property name="successUrl" value="/index" /> -->

		<!-- 未授权时要跳转的连接 -->
		<!-- <property name="unauthorizedUrl" value="/WEB-INF/view/unauthorized.jsp"/> -->
    
        <property name="filters">
            <util:map>
                <!-- <entry key="ssl" value-ref="sslFilter"></entry> -->
                
                <!-- 添加casFilter、logoutFilter到shiroFilter，如果不配置的话，项目启动会报错。 -->
                <entry key="casFilter" value-ref="casFilter" />
                <entry key="logoutFilter" value-ref="logoutFilter" />
            </util:map>
        </property>
        
		<!-- 
            shiro连接约束配置: 
                    anon： 不需要任何权限即可访问。
                    authc：表示访问该地址用户必须身份验证通过（Subject. isAuthenticated()==true） 。
                    user：表示访问该地址的用户是身份验证通过或RememberMe登录的都可以。
        -->
        <!-- 使用自定义过滤器的时候，配置方式比如：/index.jsp = role[user] 即：访问/index.jsp资源，需要有user角色才可访问. -->
        <!-- 
            `加入了2个过滤器配置：casFilter、logoutFilter，CAS单点登录服务所需。
            `至于为何要以 /oauth 作为拦截路径，主要还是让casFilter起作用，因为web.xml中shiro的过滤器拦截了所有请求，所以就不能配置成通配符了，必须指定一个拦截地址。
        -->
        <property name="filterChainDefinitions">
            <value>
                /oauth = casFilter
                /login/logout = logoutFilter
                
				/resources/** = anon
				/index.jsp = anon
				/login/** = anon
				/verifyCode = anon
				/index/page = anon
				/orderSync/* = anon
				/wx = anon
				/webservice/** = anon
				
				/socket/** = anon
				/websck = anon
				/sockjs/websck = anon
                /websck_log = anon
                /sockjs/websck_log = anon
                
				/** = authc
			</value>
		</property>
	</bean>
    
	<!-- 后置处理程序自动调用init()和destroy()方法 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- Shiro支持对方法级别的权限控制 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
		<property name="proxyTargetClass" value="true" />
	</bean>
    
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
    
    <!-- <bean id="grantingTicketExpirationPolicy" class="org.jasig.cas.ticket.support.HardTimeoutExpirationPolicy">
        <constructor-arg index="0"  value="7200000" />
    </bean> -->

    
	<!--securityManager是shiro的核心，初始化时协调各个模块运行 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!--单个realm使用realm,如果有多个realm，使用realms属性代替 -->
		<!-- <property name="realm" ref="globalAuthorizingRealm" /> -->
        <property name="subjectFactory" ref="casSubjectFactory"></property>
        <property name="realm" ref="casRealm" />

		<!-- ===========================================对于缓存这块的性能描述============================================================== -->
		
		<!-- 
			经过实际项目的运行测试，发现这部分缓存配置的重要性。
			1、【未配置cacheManager】 ： 如果没有配置 cacheManager属性，则shiro本身会检测是否配置了缓存机制(cacheManager)，如果没有，则会连续请求(可以理解为心跳机制)，导致项目页面响应时间长。
			2、【配置了cacheManager】 ： 如果配置了 cacheManager属性，则只会请求1次，大大节省项目页面响应速度。
		-->
		
		<!-- 内存机制记录登录用户信息 -->
		<!-- <property name="cacheManager" ref="shiroMemoryCacheManager" /> -->
		<!-- 缓存机制记录登录用户信息，使用EhCache缓存 -->
		<!-- <property name="cacheManager" ref="shiroCacheManager" /> -->
		<!-- =============================================================================================================================== -->

        <!-- sessionManager -->
	    <!-- <property name="sessionManager" ref="sessionManager" /> -->
	 
	    <!-- 使用redis缓存 -->
	    <property name="cacheManager" ref="cacheManager" />

		<!-- Cookie机制实现:记住我 -->
		<property name="rememberMeManager" ref="rememberMeManager" />
	</bean>
    
    
    
	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cipherKey"
			value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />

		<!-- Shiro自身提供Cookie的实现有以下2种.任选其一. 大多数采用rememberMeCookie的实现。 -->
		<property name="cookie" ref="rememberMeCookie" />
		<!-- <property name="cookie" ref="sessionIdCookie"/> -->
	</bean>

	<!-- 会话Cookie模板。maxAge=-1表示浏览器关闭时失效此Cookie -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="sid" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="-1" />
	</bean>
	<!-- 即记住我的Cookie，保存时长1小时 -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="3600" /><!-- 1小时，秒为单位 -->
	</bean>



    <!-- 用户授权/认证信息Cache -->
    <!-- 基于内存机制记录当前登录用户信息 -->
    <!-- <bean id="shiroMemoryCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"/> -->
    <!-- 使用缓存记录当前登录用户信息（目前项目集成了redis，则该ehcache暂时不去使用它） -->
    <!-- 
    <bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="ehCacheManager" />
    </bean>
    -->
 
	<!-- shiro权限全局异常 -->
	<bean class="pers.zb.ucenter.web.shiro.OperatorExceptionResolver" />
	
	
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager" />
        <property name="arguments" ref="securityManager" />
    </bean>
</beans>