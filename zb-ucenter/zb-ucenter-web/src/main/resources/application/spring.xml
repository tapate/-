<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jee="http://www.springframework.org/schema/jee" xmlns:lang="http://www.springframework.org/schema/lang"
    xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:task="http://www.springframework.org/schema/task"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:cache="http://www.springframework.org/schema/cache" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
                        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd 
                        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
                        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
    <!-- 如果配置了<mvc:annotation-driven />，则RequestMappingHandlerMapping这个bean中配置的自定义拦截器不会生效。 需要使用<mvc:interceptors>配置拦截器才可以。-->

    <!-- 处理responseBody 里面日期类型 -->  
    <mvc:annotation-driven>
        <mvc:message-converters>  
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
                <property name="objectMapper">  
                    <bean class="com.fasterxml.jackson.databind.ObjectMapper">  
                        <property name="dateFormat">  
                            <bean class="java.text.SimpleDateFormat">  
                                <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />  
                            </bean>  
                        </property>  
                    </bean>  
                </property>  
            </bean>  
        </mvc:message-converters>  
    </mvc:annotation-driven>
	 
	<context:component-scan base-package="pers.zb.*"/>
    
	<!-- 
	[项目集成了redis缓存了。ehcache暂时不用。如果想切换成ehcache，则将注释去掉即可。同时在shiro的核心配置中，指定ehcacheManage配置]
    <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:/ehcache.xml" />
        <property name="shared" value="true" />
    </bean>
    
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehCacheManager" />
    </bean>

    <cache:annotation-driven cache-manager="cacheManager" />
     -->
     
    <!-- 引入配置 -->
    <!-- <import resource="classpath:/jdbc/spring-jdbc.xml" />
    <import resource="classpath:/spring/activemq/spring-activemq-queue.xml" />
    <import resource="classpath:/spring/activemq/spring-activemq-topic.xml" /> -->
    
    
    <!-- <context:property-placeholder location="classpath*:/properties/*.properties" ignore-resource-not-found="true" ignore-unresolvable="true" /> -->
    
    <!-- 配置属性资源文件 -->
    <!-- 
    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath*:/properties/*.properties</value>
            </list>
        </property>
    </bean>
    -->
     
    <!-- 引入properties -->
    <!-- 
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreResourceNotFound" value="false" />
        <property name="properties" ref="configProperties" />
    </bean>
	-->
    
    <!-- 这里的配置，与DataSourceAspect中的效果一样。 -->
    <!-- 
    <bean id="manyDataSourceAspect" class="pers.zb.web.common.aspect.DataSourceAspect" />
	<aop:config>
        <aop:aspect id="c" ref="manyDataSourceAspect">
            <aop:pointcut id="tx" expression="execution(* pers.zb.web.service.*.*(..))"/>
            <aop:around pointcut-ref="tx" method="doMethod"/>
        </aop:aspect>
    </aop:config> 
     -->
   

	<bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" />   
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>

    <!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
    	<property name="interceptors">
    		<list>
    			<ref bean="wsInterceptor"/>
    		</list>
    	</property>
    </bean> -->
    
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/>
	
	<bean id="wsInterceptor" class="pers.zb.ucenter.web.interceptor.wsInterceptor"/>
	
	<!-- 
		由于<mvc:annotation-driven />默认注册了默认的拦截器，如果使用RequestMappingHandlerMapping注册拦截器的话，则不会生效。使用<mvc:interceptors>注解注册拦截器就会生效。
		<mvc:interceptors>的优先级比RequestMappingHandlerMapping这个bean的优先级要高！
	 -->
	 
	<mvc:interceptors>
		<mvc:interceptor>
		    <mvc:mapping path="/**"/>
			<mvc:exclude-mapping path="/resources/**"/>
	        <mvc:exclude-mapping path="/resources/**/*.css"/>
	        <mvc:exclude-mapping path="/resources/**/*.js"/>
	        <mvc:exclude-mapping path="/resources/**/*.jpg"/>
	        <mvc:exclude-mapping path="/resources/**/*.png"/>
	        <mvc:exclude-mapping path="/resources/**/*.icon"/>
	        <mvc:exclude-mapping path="/resources/**/*.jpeg"/>
	        <mvc:exclude-mapping path="/resources/**/*.html"/>
	        <mvc:exclude-mapping path="/resources/**/*.gif"/>
			<ref bean="wsInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
	
	
	<task:annotation-driven/>
	
    <!-- spring解析处理上传文件 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 设置上传文件的最大尺寸为10MB -->  
        <property name="maxUploadSize">  
            <value>10485760</value>  
        </property>  
    </bean>
    
    
    
    <!-- ================================================分布式配置管理中心配置，百度开源的disconf框架。   start=============================================================== -->
    
    <!-- 使用disconf必须添加以下配置 -->
    <bean id="disconfMgrBean" class="com.baidu.disconf.client.DisconfMgrBean" destroy-method="destroy">
        <property name="scanPackage" value="pers.zb.ucenter.web"/>
    </bean>
    <bean id="disconfMgrBean2" class="com.baidu.disconf.client.DisconfMgrBeanSecond" init-method="init" destroy-method="destroy"></bean>
    
    <!-- 使用托管方式的disconf配置(无代码侵入, 配置更改会自动reload)，会自动更新配置文件内容-->
    <!-- 
        .特别说明：
                .由于这里没有使用spring默认的属性加载类，使用spring的加载器，可以这么配置的：classpath*:/properties/*.properties
                .但是，这里使用百度的加载类，所以，就无法使用通配符号表示，只能显示声明配置文件路径。
                .意思也就是说，当前项目(包括子模块项目)使用到的所有properties最好都在这配置下，不然启动项目会报错，找不到对应的配置文件.
     -->
    <bean id="configProperties" class="com.baidu.disconf.client.addons.properties.ReloadablePropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:/properties/cas.properties</value>
                <value>classpath:/properties/config.properties</value>
                <value>classpath:/properties/wxinf.properties</value>
                <value>classpath:/properties/zookeeper.properties</value>
                <value>classpath:/properties/jdbc.properties</value>
                <value>classpath:/properties/redis.properties</value>
            </list>
        </property>
    </bean>
    
    <bean id="propertyConfigurer" class="com.baidu.disconf.client.addons.properties.ReloadingPropertyPlaceholderConfigurer">
        <property name="ignoreResourceNotFound" value="true" />
        <property name="ignoreUnresolvablePlaceholders" value="true" />
        <property name="propertiesArray">
            <list>
                <ref bean="configProperties"/>
            </list>
        </property>
    </bean>
    <!-- ================================================分布式配置管理中心配置，百度开源的disconf框架。   end=============================================================== -->
</beans>